#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –≤—ã–∑–æ–≤–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

const puppeteer = require('puppeteer');

async function testFrontendAPI() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API...');
  
  const browser = await puppeteer.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const page = await browser.newPage();
  
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const requests = [];
  const responses = [];
  
  page.on('request', request => {
    if (request.url().includes('/api/')) {
      requests.push({
        url: request.url(),
        method: request.method(),
        headers: request.headers()
      });
    }
  });
  
  page.on('response', response => {
    if (response.url().includes('/api/')) {
      responses.push({
        url: response.url(),
        status: response.status(),
        statusText: response.statusText()
      });
    }
  });
  
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await page.waitForTimeout(3000);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞
    console.log('üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥...');
    await page.goto('http://localhost:3000/catalog', { waitUntil: 'networkidle0' });
    await page.waitForTimeout(2000);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–¥–µ–ª–æ–∫
    console.log('ü§ù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏...');
    await page.goto('http://localhost:3000/deals', { waitUntil: 'networkidle0' });
    await page.waitForTimeout(2000);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    await page.goto('http://localhost:3000/statistics', { waitUntil: 'networkidle0' });
    await page.waitForTimeout(2000);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    console.log('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∫—É...');
    await page.goto('http://localhost:3000/admin', { waitUntil: 'networkidle0' });
    await page.waitForTimeout(2000);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('='.repeat(50));
    
    if (requests.length === 0) {
      console.log('‚ö†Ô∏è  API –∑–∞–ø—Ä–æ—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ:');
      console.log('   1. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      console.log('   2. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log(`‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${requests.length} API –∑–∞–ø—Ä–æ—Å–æ–≤:`);
      requests.forEach((req, index) => {
        console.log(`   ${index + 1}. ${req.method} ${req.url}`);
      });
      
      console.log(`\nüì° –ü–æ–ª—É—á–µ–Ω–æ ${responses.length} –æ—Ç–≤–µ—Ç–æ–≤:`);
      responses.forEach((res, index) => {
        const status = res.status >= 200 && res.status < 300 ? '‚úÖ' : '‚ùå';
        console.log(`   ${index + 1}. ${status} ${res.status} ${res.url}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    const errors = await page.evaluate(() => {
      return window.consoleErrors || [];
    });
    
    if (errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏:');
      errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    } else {
      console.log('\n‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  } finally {
    await browser.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testFrontendAPI().catch(console.error);
}

module.exports = { testFrontendAPI };
