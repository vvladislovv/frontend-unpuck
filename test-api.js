#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API endpoints –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Unpacker Clone
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node test-api.js [baseUrl]
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node test-api.js http://localhost:3001
 * node test-api.js https://api.unpacker-clone.com
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.argv[2] || 'http://localhost:3001';
const API_BASE = `${BASE_URL}/api`;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
const testResults = {
  passed: 0,
  failed: 0,
  total: 0,
  details: []
};

// –£—Ç–∏–ª–∏—Ç—ã
const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

const logTest = (testName, status, details = '') => {
  const statusColor = status === 'PASS' ? 'green' : 'red';
  const statusSymbol = status === 'PASS' ? '‚úì' : '‚úó';
  
  log(`${statusSymbol} ${testName}`, statusColor);
  if (details) {
    log(`  ${details}`, 'yellow');
  }
  
  testResults.total++;
  if (status === 'PASS') {
    testResults.passed++;
  } else {
    testResults.failed++;
  }
  
  testResults.details.push({
    name: testName,
    status,
    details
  });
};

// –°–æ–∑–¥–∞–Ω–∏–µ axios instance
const api = axios.create({
  baseURL: API_BASE,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  }
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
let authToken = null;
let userId = null;
let productId = null;
let dealId = null;
let messageId = null;

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  user: {
    firstName: '–¢–µ—Å—Ç',
    lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: 'test@example.com',
    username: 'testuser',
    password: 'testpassword123',
    role: 'buyer'
  },
  product: {
    wbArticle: 'TEST123456',
    title: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
    price: 1000,
    images: ['https://via.placeholder.com/300x300'],
    category: 'electronics',
    brand: 'TestBrand'
  },
  deal: {
    productId: null, // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    quantity: 1,
    totalPrice: 1000
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API

async function testAuthEndpoints() {
  log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...', 'cyan');
  
  try {
    // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registerResponse = await api.post('/auth/register', testData.user);
    if (registerResponse.status === 200 || registerResponse.status === 201) {
      logTest('POST /auth/register', 'PASS', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      authToken = registerResponse.data.token || registerResponse.data.data?.token;
      userId = registerResponse.data.userId || registerResponse.data.data?.id;
    } else {
      logTest('POST /auth/register', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${registerResponse.status}`);
    }
  } catch (error) {
    if (error.response?.status === 409) {
      logTest('POST /auth/register', 'PASS', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      logTest('POST /auth/register', 'FAIL', error.response?.data?.message || error.message);
    }
  }

  try {
    // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
    const loginResponse = await api.post('/auth/login', {
      identifier: testData.user.email,
      password: testData.user.password
    });
    if (loginResponse.status === 200) {
      logTest('POST /auth/login', 'PASS', '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
      authToken = loginResponse.data.token || loginResponse.data.data?.token;
      userId = loginResponse.data.userId || loginResponse.data.data?.id;
    } else {
      logTest('POST /auth/login', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${loginResponse.status}`);
    }
  } catch (error) {
    logTest('POST /auth/login', 'FAIL', error.response?.data?.message || error.message);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  if (authToken) {
    api.defaults.headers.Authorization = `Bearer ${authToken}`;
  }

  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    const profileResponse = await api.get('/auth/me');
    if (profileResponse.status === 200) {
      logTest('GET /auth/me', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } else {
      logTest('GET /auth/me', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${profileResponse.status}`);
    }
  } catch (error) {
    logTest('GET /auth/me', 'FAIL', error.response?.data?.message || error.message);
  }
}

async function testUserEndpoints() {
  log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'cyan');
  
  try {
    // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    const updateResponse = await api.put('/users/profile', {
      firstName: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ò–º—è',
      lastName: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –§–∞–º–∏–ª–∏—è'
    });
    if (updateResponse.status === 200) {
      logTest('PUT /users/profile', 'PASS', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
    } else {
      logTest('PUT /users/profile', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${updateResponse.status}`);
    }
  } catch (error) {
    logTest('PUT /users/profile', 'FAIL', error.response?.data?.message || error.message);
  }

  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const referralsResponse = await api.get('/users/referrals');
    if (referralsResponse.status === 200) {
      logTest('GET /users/referrals', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    } else {
      logTest('GET /users/referrals', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${referralsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /users/referrals', 'FAIL', error.response?.data?.message || error.message);
  }

  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const balanceResponse = await api.get('/users/balance');
    if (balanceResponse.status === 200) {
      logTest('GET /users/balance', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
    } else {
      logTest('GET /users/balance', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${balanceResponse.status}`);
    }
  } catch (error) {
    logTest('GET /users/balance', 'FAIL', error.response?.data?.message || error.message);
  }

  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationsResponse = await api.get('/users/notifications');
    if (notificationsResponse.status === 200) {
      logTest('GET /users/notifications', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    } else {
      logTest('GET /users/notifications', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${notificationsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /users/notifications', 'FAIL', error.response?.data?.message || error.message);
  }
}

async function testProductEndpoints() {
  log('\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...', 'cyan');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    const productsResponse = await api.get('/products');
    if (productsResponse.status === 200) {
      logTest('GET /products', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤');
    } else {
      logTest('GET /products', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${productsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /products', 'FAIL', error.response?.data?.message || error.message);
  }

  try {
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const createResponse = await api.post('/products', testData.product);
    if (createResponse.status === 200 || createResponse.status === 201) {
      logTest('POST /products', 'PASS', '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      productId = createResponse.data.id || createResponse.data.data?.id;
      testData.deal.productId = productId;
    } else {
      logTest('POST /products', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${createResponse.status}`);
    }
  } catch (error) {
    logTest('POST /products', 'FAIL', error.response?.data?.message || error.message);
  }

  if (productId) {
    try {
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
      const productResponse = await api.get(`/products/${productId}`);
      if (productResponse.status === 200) {
        logTest('GET /products/:id', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID');
      } else {
        logTest('GET /products/:id', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${productResponse.status}`);
      }
    } catch (error) {
      logTest('GET /products/:id', 'FAIL', error.response?.data?.message || error.message);
    }

    try {
      // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
      const updateResponse = await api.put(`/products/${productId}`, {
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä',
        price: 1500
      });
      if (updateResponse.status === 200) {
        logTest('PUT /products/:id', 'PASS', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      } else {
        logTest('PUT /products/:id', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${updateResponse.status}`);
      }
    } catch (error) {
      logTest('PUT /products/:id', 'FAIL', error.response?.data?.message || error.message);
    }
  }

  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const myProductsResponse = await api.get('/products/my/products');
    if (myProductsResponse.status === 200) {
      logTest('GET /products/my/products', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } else {
      logTest('GET /products/my/products', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${myProductsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /products/my/products', 'FAIL', error.response?.data?.message || error.message);
  }
}

async function testDealEndpoints() {
  log('\nü§ù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫...', 'cyan');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫
    const dealsResponse = await api.get('/deals');
    if (dealsResponse.status === 200) {
      logTest('GET /deals', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫');
    } else {
      logTest('GET /deals', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${dealsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /deals', 'FAIL', error.response?.data?.message || error.message);
  }

  if (productId) {
    try {
      // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
      const createResponse = await api.post('/deals', testData.deal);
      if (createResponse.status === 200 || createResponse.status === 201) {
        logTest('POST /deals', 'PASS', '–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏');
        dealId = createResponse.data.id || createResponse.data.data?.id;
      } else {
        logTest('POST /deals', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${createResponse.status}`);
      }
    } catch (error) {
      logTest('POST /deals', 'FAIL', error.response?.data?.message || error.message);
    }

    if (dealId) {
      try {
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –ø–æ ID
        const dealResponse = await api.get(`/deals/${dealId}`);
        if (dealResponse.status === 200) {
          logTest('GET /deals/:id', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ ID');
        } else {
          logTest('GET /deals/:id', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${dealResponse.status}`);
        }
      } catch (error) {
        logTest('GET /deals/:id', 'FAIL', error.response?.data?.message || error.message);
      }
    }
  }
}

async function testPaymentEndpoints() {
  log('\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π...', 'cyan');
  
  if (productId) {
    try {
      // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      const paymentResponse = await api.post('/payment/create', {
        productId: productId,
        quantity: 1,
        totalPrice: 1000,
        userId: userId
      });
      if (paymentResponse.status === 200 || paymentResponse.status === 201) {
        logTest('POST /payment/create', 'PASS', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞');
      } else {
        logTest('POST /payment/create', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${paymentResponse.status}`);
      }
    } catch (error) {
      logTest('POST /payment/create', 'FAIL', error.response?.data?.message || error.message);
    }
  }
}

async function testAdminEndpoints() {
  log('\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∫–∏...', 'cyan');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statsResponse = await api.get('/admin/stats');
    if (statsResponse.status === 200) {
      logTest('GET /admin/stats', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    } else {
      logTest('GET /admin/stats', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${statsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /admin/stats', 'FAIL', error.response?.data?.message || error.message);
  }

  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const messagesResponse = await api.get('/admin/messages');
    if (messagesResponse.status === 200) {
      logTest('GET /admin/messages', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
    } else {
      logTest('GET /admin/messages', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${messagesResponse.status}`);
    }
  } catch (error) {
    logTest('GET /admin/messages', 'FAIL', error.response?.data?.message || error.message);
  }

  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResponse = await api.get('/admin/users');
    if (usersResponse.status === 200) {
      logTest('GET /admin/users', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } else {
      logTest('GET /admin/users', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${usersResponse.status}`);
    }
  } catch (error) {
    logTest('GET /admin/users', 'FAIL', error.response?.data?.message || error.message);
  }
}

async function testChatEndpoints() {
  log('\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞...', 'cyan');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤
    const chatsResponse = await api.get('/chat/chats');
    if (chatsResponse.status === 200) {
      logTest('GET /chat/chats', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤');
    } else {
      logTest('GET /chat/chats', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${chatsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /chat/chats', 'FAIL', error.response?.data?.message || error.message);
  }

  try {
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    const createChatResponse = await api.post('/chat/chats', {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç',
      isGroup: false,
      participantIds: [userId]
    });
    if (createChatResponse.status === 200 || createChatResponse.status === 201) {
      logTest('POST /chat/chats', 'PASS', '–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞');
      const chatId = createChatResponse.data.id || createChatResponse.data.data?.id;
      
      if (chatId) {
        try {
          // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
          const messageResponse = await api.post(`/chat/chats/${chatId}/messages`, {
            content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            type: 'TEXT'
          });
          if (messageResponse.status === 200 || messageResponse.status === 201) {
            logTest('POST /chat/chats/:id/messages', 'PASS', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
          } else {
            logTest('POST /chat/chats/:id/messages', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${messageResponse.status}`);
          }
        } catch (error) {
          logTest('POST /chat/chats/:id/messages', 'FAIL', error.response?.data?.message || error.message);
        }
      }
    } else {
      logTest('POST /chat/chats', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${createChatResponse.status}`);
    }
  } catch (error) {
    logTest('POST /chat/chats', 'FAIL', error.response?.data?.message || error.message);
  }
}

async function testTransactionEndpoints() {
  log('\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...', 'cyan');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactionsResponse = await api.get('/transactions');
    if (transactionsResponse.status === 200) {
      logTest('GET /transactions', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    } else {
      logTest('GET /transactions', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${transactionsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /transactions', 'FAIL', error.response?.data?.message || error.message);
  }

  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const statsResponse = await api.get('/transactions/stats');
    if (statsResponse.status === 200) {
      logTest('GET /transactions/stats', 'PASS', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    } else {
      logTest('GET /transactions/stats', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${statsResponse.status}`);
    }
  } catch (error) {
    logTest('GET /transactions/stats', 'FAIL', error.response?.data?.message || error.message);
  }
}

async function testUploadEndpoints() {
  log('\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...', 'cyan');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
  const testFileContent = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞';
  const testFile = new Blob([testFileContent], { type: 'text/plain' });
  const formData = new FormData();
  formData.append('file', testFile, 'test.txt');
  
  try {
    // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const uploadResponse = await api.post('/upload/file', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      }
    });
    if (uploadResponse.status === 200 || uploadResponse.status === 201) {
      logTest('POST /upload/file', 'PASS', '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞');
    } else {
      logTest('POST /upload/file', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${uploadResponse.status}`);
    }
  } catch (error) {
    logTest('POST /upload/file', 'FAIL', error.response?.data?.message || error.message);
  }
}

async function cleanup() {
  log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...', 'yellow');
  
  if (productId) {
    try {
      await api.delete(`/products/${productId}`);
      logTest('DELETE /products/:id', 'PASS', '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
    } catch (error) {
      logTest('DELETE /products/:id', 'FAIL', error.response?.data?.message || error.message);
    }
  }

  if (authToken) {
    try {
      await api.post('/auth/logout');
      logTest('POST /auth/logout', 'PASS', '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    } catch (error) {
      logTest('POST /auth/logout', 'FAIL', error.response?.data?.message || error.message);
    }
  }
}

function generateReport() {
  log('\nüìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API', 'bright');
  log('='.repeat(50), 'cyan');
  
  log(`\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.total}`, 'bright');
  log(`–ü—Ä–æ—à–ª–æ: ${testResults.passed}`, 'green');
  log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testResults.failed}`, 'red');
  
  const successRate = ((testResults.passed / testResults.total) * 100).toFixed(1);
  log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`, successRate > 80 ? 'green' : 'yellow');
  
  if (testResults.failed > 0) {
    log('\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:', 'red');
    testResults.details
      .filter(test => test.status === 'FAIL')
      .forEach(test => {
        log(`  ‚Ä¢ ${test.name}: ${test.details}`, 'red');
      });
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
  const reportData = {
    timestamp: new Date().toISOString(),
    baseUrl: BASE_URL,
    summary: {
      total: testResults.total,
      passed: testResults.passed,
      failed: testResults.failed,
      successRate: parseFloat(successRate)
    },
    details: testResults.details
  };
  
  const reportPath = path.join(__dirname, 'api-test-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
  log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`, 'cyan');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Unpacker Clone', 'bright');
  log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`, 'cyan');
  log('='.repeat(50), 'cyan');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await api.get('/health').catch(() => {
      log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...', 'yellow');
    });
    
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    await testAuthEndpoints();
    await testUserEndpoints();
    await testProductEndpoints();
    await testDealEndpoints();
    await testPaymentEndpoints();
    await testAdminEndpoints();
    await testChatEndpoints();
    await testTransactionEndpoints();
    await testUploadEndpoints();
    
    // –û—á–∏—Å—Ç–∫–∞
    await cleanup();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generateReport();
    
  } catch (error) {
    log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testAuthEndpoints,
  testUserEndpoints,
  testProductEndpoints,
  testDealEndpoints,
  testPaymentEndpoints,
  testAdminEndpoints,
  testChatEndpoints,
  testTransactionEndpoints,
  testUploadEndpoints
};
